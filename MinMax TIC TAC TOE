def print_board(b):
    for row in b:
        print(" | ".join(row))
        print("-" * 5)

def win(b, p):
    return any(all(cell == p for cell in row) for row in b) or \
           any(all(b[r][c] == p for r in range(3)) for c in range(3)) or \
           all(b[i][i] == p for i in range(3)) or \
           all(b[i][2 - i] == p for i in range(3))

def draw(b): return all(cell in ['X', 'O'] for row in b for cell in row)

def minimax(b, is_max):
    if win(b, 'O'): return 1
    if win(b, 'X'): return -1
    if draw(b): return 0
    scores = []
    for r in range(3):
        for c in range(3):
            if b[r][c] == ' ':
                b[r][c] = 'O' if is_max else 'X'
                scores.append(minimax(b, not is_max))
                b[r][c] = ' '
    return max(scores) if is_max else min(scores)

def best_move(b):
    best = -float('inf')
    move = (0, 0)
    for r in range(3):
        for c in range(3):
            if b[r][c] == ' ':
                b[r][c] = 'O'
                score = minimax(b, False)
                b[r][c] = ' '
                if score > best:
                    best = score
                    move = (r, c)
    return move

def play():
    board = [[' ']*3 for _ in range(3)]
    while True:
        print_board(board)
        r, c = map(int, input("Your move (row col): ").split())
        if board[r][c] != ' ':
            print("Cell taken!")
            continue
        board[r][c] = 'X'
        if win(board, 'X'):
            print_board(board); print("You win!"); break
        if draw(board):
            print_board(board); print("Draw!"); break
        ai_r, ai_c = best_move(board)
        board[ai_r][ai_c] = 'O'
        if win(board, 'O'):
            print_board(board); print("AI wins!"); break
        if draw(board):
            print_board(board); print("Draw!"); break

play()
