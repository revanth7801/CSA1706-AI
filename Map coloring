def is_valid(state, color, assignment, neighbors):
    for neighbor in neighbors[state]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(assignment, states, colors, neighbors):
    if len(assignment) == len(states):
        return assignment

    unassigned = [s for s in states if s not in assignment]
    first = unassigned[0]

    for color in colors:
        if is_valid(first, color, assignment, neighbors):
            assignment[first] = color
            result = backtrack(assignment, states, colors, neighbors)
            if result is not None:
                return result
            assignment.pop(first)
    return None

def map_coloring():
    print("Map Coloring Problem using CSP")
    states = ['A', 'B', 'C', 'D']
    colors = ['Red', 'Green', 'Blue']
    neighbors = {
        'A': ['B', 'C'],
        'B': ['A', 'C', 'D'],
        'C': ['A', 'B', 'D'],
        'D': ['B', 'C']
    }

    solution = backtrack({}, states, colors, neighbors)

    if solution:
        for state in sorted(solution):
            print(f"State {state} => {solution[state]}")
    else:
        print("No valid coloring found.")

map_coloring()
